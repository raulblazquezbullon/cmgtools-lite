""" 
  Script to generate a python dictionary with sample metadata. 
  Used for nanoAOD postproduction.
"""

# Import libraries
import os, re, sys
from datetime import date
import numpy 
from optparse import OptionParser
from cfgs.samplepaths import samplepaths as paths


""" Some hardcoded configurations """
# These are the configurations need to run the postprocessor
kreators = {
 "data" : lambda args : "{name} = kreator.makeDataComponentFromLocal('{dname}', '', '{path}', '', '.*root', {year}, [], json = json)".format(**args),
 "mc"   : lambda args : "{name} = kreator.makeMCComponentFromLocal('{dname}', '', '{path}', '.*root', {xsec})".format(**args)
}

# Name for the output file
prefix = "samples_13p6TeV_%s%s_nanoAODv10_fromLocal.py"

# Goldenjson to be used for data postprocessing.
goldenjson = "Cert_Collisions2022_355100_362760_Golden.json"

def add_parsing_opts():
  ''' Function with base parsing arguments used by any script '''
  parser = OptionParser(usage = "python wz-run.py [options]", 
                                 description = "Main options for running WZ analysis") 
  # -- Input and outputs
  parser.add_option("--isData", dest = "isData", default = False, action="store_true",
              help = "CFG is for data or MC?")
  parser.add_option("--year", dest = "year", default = "2022", 
              help = "Campaign year")
  parser.add_option("--verbose", dest = "verbose", default = 0, type = int, 
              help = "Level of verbosity")
  return parser.parse_args()

class sample_group:
  def __init__(self):
    self.name    = ""
    self.mainpath = ""
    self.type_ = ""
    self.metadata = [] 
    return 
  
def match_samples(path, type_):
  ''' This function walks over folders until it finds a rootfile'''
  # -- First find the folders with rootfiles only
  folders = []
  for root, dirs, files in os.walk( path ):
    if "test" in root: continue
    are_there_rfiles = any([".root" in f for f in files])
    if not are_there_rfiles: continue
    folder = root.replace(path, "")
    folders.append(folder)
  samples = []
  for sampname, entries in datasets[type_].items():
    samp = sample_group()

    samp.name     = sampname
    samp.type_    = type_
    samp.mainpath = path

    xsec = None
    for metadata in entries:
      try:
        dname, regex, xsec = metadata
      except ValueError:
        dname, regex = metadata
      # -- Match from the list of samples
      match = re.compile(regex)
      matches = list(filter(match.match, folders))
      
      samp.metadata.append( (dname, matches, xsec ) )    
    samples.append(samp)
  return samples 

def print_summary(samples):
  # -- Now write stuff with this 
  print(" >> Summary")
  for s in samples:
    print(("    - Sample: %s"%s.name))
    for subsample in s.metadata:
      print(("      * Private name: %s"%subsample[0]))
      print(("      * files: %s"%subsample[1]))
      if s.type_ != "data": # This metada is only available for MC
        print(("      * xsec:   %s"%subsample[2]))
      print("      ---------------------------------- ")
    print("    ==================================== ") 
  return

if __name__ == "__main__":
  
  (opts, args) = add_parsing_opts()
  type_ = "data" if opts.isData else "mc"
  year = opts.year

  inpath = paths[type_]
  if type_ == "data":
    from cfgs.Run3datasets_data import datasets  
  else:
    from cfgs.Run3datasets_mc import datasets
  
  samples = match_samples(inpath, type_)  
  if opts.verbose == 1:
    print_summary(samples) 

  # -- Now create the CFG
  outname = os.path.join( os.environ["CMSSW_BASE"], "src/CMGTools/RootTools/python/samples/%s"%(prefix%(type_, year)) ) 
  if os.path.isfile(outname):
    os.system("cp %s %s"%(outname, outname + "."))

  print(("Creating file %s"%outname))
  f = open(outname, "w")
  f.write("# Config file for Run3 sample postprocessing\n")
  f.write("# File automatically generated by create_cfg.py script on %s [yyyy-mm-dd] -- EDIT AT YOUR OWN RISK\n"%(date.today()))
  f.write("# Files read from: %s\n"%(inpath))

  f.write("from CMGTools.RootTools.samples.ComponentCreator import ComponentCreator\n")
  f.write("import os\n")
  f.write("kreator = ComponentCreator()\n")

  if type_ == "data": 
    f.write("json = os.environ['CMSSW_BASE']+'/src/CMGTools/TTHAnalysis/cfg/%s'\n"%goldenjson)


  wholelist = []
  
  for s in samples:
    kreator = kreators[type_]
    dname = s.name
    f.write("# ------ %s dataset\n"%dname)
    
    tolist = []
    for subsample in s.metadata:
      args = None
      
      for ifold, fold in enumerate(subsample[1]): 
        name = subsample[0].replace("-", "") +"_%d"%ifold  
        if type_ == "mc":
          args  = dict(name = name,
                        dname = subsample[0],
                        path = "%s/%s"%( paths[type_], fold ),
                        xsec = subsample[2])
        else:
          args = dict(name = name,
                      dname = subsample[0],
                      path = "%s/%s"%( paths[type_], fold ),
                      year = year)
        comp = kreator(args)                
        f.write(comp+"\n")
        tolist.append(name)                 

    wholelist.append( dname )
    f.write("%s = [%s]\n\n"%(dname, ", ".join(tolist)))               

  f.write("\n\n\n%sSamples_list = %s\n"%(type_, " + ".join(wholelist)))
  f.write("%sSamples_toImport = %sSamples_list"%(type_, type_))
  f.close() 
       
  print("Files written")
    
    
